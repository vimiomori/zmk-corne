/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y    &kp U  &kp I          &kp O    &kp P     &kp ESCAPE
&kp LCTRL  &kp A  &kp S  &kp D             &kp F  &kp G        &kp H    &kp J  &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N    &kp M  &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                         &kp LEFT_COMMAND  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp EXCLAMATION  &kp AT  &kp POUND  &kp DOLLAR  &kp PERCENT    &kp CARET      &kp AMPS  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BSPC
&kp GRAVE   &kp N1           &kp N2  &kp N3     &kp N4      &kp N5         &kp N6         &kp N7    &kp N8        &kp N9                &kp N0                 &trans
&mo 4       &trans           &trans  &trans     &trans      &trans         &trans         &trans    &trans        &trans                &trans                 &trans
                                     &kp LGUI   &trans      &kp SPACE      &kp LG(SPACE)  &mo 3     &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE     &kp MINUS        &kp PLUS       &kp LBKT              &kp RBKT               &kp PLUS         &kp MINUS  &kp COLON  &kp EQUAL    &kp EXCL       &kp LS(UNDER)  &kp GRAVE
&kp TILDE     &kp EXCLAMATION  &kp AT         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL        &kp LEFT   &kp DOWN   &kp UP       &kp RIGHT      &kp BSLH       &kp TILDE
&kp LEFT_ALT  &kp PIPE         &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp MINUS        &kp UNDER  &kp EXCL   &kp EQUAL    &kp BACKSLASH  &kp BACKSLASH  &kp TILDE
                                              &mo 5                 &mo 3                  &kp LA(SPACE)    &kp RET    &trans     &mt GLOBE E
            >;
        };

        control_alt {
            bindings = <
&trans  &kp LC(LA(Q))  &kp LC(LA(W))  &kp LC(LA(E))  &kp LC(LA(R))  &kp LC(LA(T))    &kp LC(LA(Y))  &kp LC(LA(U))  &kp LC(LA(I))  &kp LC(LA(O))  &kp LC(LA(P))  &trans
&trans  &kp LC(LA(A))  &kp LC(LA(S))  &kp LC(LA(D))  &kp LC(LA(F))  &kp LC(LA(G))    &kp LC(LA(H))  &kp LC(LA(J))  &kp LC(LA(K))  &kp LC(LA(L))  &kp SEMI       &trans
&trans  &kp LC(LA(Z))  &kp LC(LA(X))  &kp LC(LA(C))  &kp LC(LA(V))  &kp LC(LA(B))    &kp LC(LA(N))  &kp LC(LA(M))  &kp COMMA      &kp DOT        &kp FSLH       &trans
                                      &trans         &trans         &trans           &trans         &trans         &trans
            >;
        };

        command_shift {
            bindings = <
&trans  &trans                &trans                &mt GLOBE E           &trans                &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(LG(NUMBER_1))  &kp LS(LG(NUMBER_2))  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(NUMBER_5))    &trans  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans  &trans                &trans                &trans                &trans                &trans                  &trans  &trans  &trans  &trans  &trans  &trans
                                                    &trans                &trans                &trans                  &trans  &trans  &trans
            >;
        };

        command_alt {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp LG(LA(I))  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans         &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans         &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
